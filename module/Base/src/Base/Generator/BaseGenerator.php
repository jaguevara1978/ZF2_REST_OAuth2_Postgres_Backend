<?namespace Base\Generator;define( 'PROTECTED_ZONE', '/*#PROTECTED_ZONE#*/' );define( 'REPLACE_STR', '###REPLACE_SWITH_STRING###' );define( 'TAB', "\t" );use Base\Controller\BaseController;use Zend\Code\Generator\ClassGenerator;use Zend\Code\Generator\DocBlockGenerator;use Zend\Code\Generator\DocBlock\Tag;use Zend\Code\Generator\PropertyGenerator;use Zend\Code\Generator\MethodGenerator;use Zend\Code\Generator\FileGenerator;abstract class BaseGenerator  {    protected $metadata;    protected $db;    protected $tableName;    protected $table;    protected $moduleName;    protected $entity;    protected $objectPath;    protected $useArr = array ( );    protected $properties;    protected $protectedCode;    protected $subDir;    protected $useArray = array ( );    protected $extendedClass;    protected $moduleSrcPath;    protected $filePath;        protected $controller;        protected $className;    protected $classNameSpace;    protected $nameFormatFull = true;    protected $suffix;    abstract public function addMethods( &$classGenerator );    public function setNameFormatFull( $boolean ) {        $this->nameFormatFull = $boolean;    }    public function __construct( $controller, $metadata, $db, $entity ) {        $this->setTableName( $entity );        $this->setEntity( $entity );        $this->setDb( $db );        $this->setMetadata( $metadata );        $this->controller = $controller;    }        public function setSuffix ( $string ) {        $this->suffix = $string;    }    public function getSuffix ( ) {        if ( !$this->suffix ) {            $this->suffix = $this->subDir;        }        return $this->suffix;    }        public function getClassName ( ) {        if ( !$this->className ) {            $this->className = $this->toCamelCase( $this->tableName );            if ( $this->nameFormatFull ) {                $this->className .= $this->getSuffix( );            }        }        return $this->className;    }        public function getClassNameSpace ( ) {        if ( !$this->classNameSpace ) {            $this->classNameSpace = $this->getModuleName( ).'\\'.$this->subDir;        }        return $this->classNameSpace;    }    public function getFullNameSpace( ) {        return $this->getClassNameSpace ( ) . '\\' . $this->getClassName ( );    }    public function setEntity( $string ) {        $this->entity = ucwords( $string );    }        public function setSubDir( $string ) {        $this->subDir = $string;    }    public function setUseArray( $array ) {        $this->useArray = $array;    }    public function setExtendedClass( $string ) {        $this->extendedClass = $string;    }        public function getModuleName ( ) {        if ( !$this->moduleName ) {            $this->moduleName = ucfirst( $this->db );        }        return $this->moduleName;    }    public function getTableName( ) {        return $this->tableName;    }    public function setTableName( $string ) {        $this->tableName = $string;    }    public function setDb( $string ) {        $this->db = $string;    }    public function setMetadata( $metadata ) {        $this->metadata = $metadata;    }    public function getMetadata( ) {        if ( !$this->metadata ) {            $this->metadata = new \Zend\Db\Metadata\Metadata( $this->controller->getAdapter( $this->db ) );                }        return $this->metadata;    }        public function getTable( ) {        if ( !$this->table ) {            $this->table = $this->getMetadata( )->getTable( $this->tableName );        }        return $this->table;    }    public function getModuleSrcPath ( ) {        if ( !$this->moduleSrcPath ) {            $this->moduleSrcPath = getcwd( ).'/module/'.$this->getModuleName( ).'/src/'.$this->getModuleName( ).'/';        }        return $this->moduleSrcPath;    }    public function getObjectPath( ) {        if ( !$this->objectPath ) {            $this->objectPath = $this->subDir.'/'.$this->getClassName( ).'.php';        }        return $this->objectPath;    }    public function getFilePath( ) {        if ( !$this->filePath ) {            $this->filePath = $this->getModuleSrcPath().$this->getObjectPath( );        }        return $this->filePath;    }    public function setProtectedCode( $string = '' ) {        if ( $this->protectedCode ) $this->protectedCode .= PHP_EOL;        $this->protectedCode .= trim ( $string );    }    public function getProtectedCode( ) {        if ( !$this->protectedCode ) {            $this->protectedCode = '';        }        return $this->protectedCode;    }    public function response ( $data, $status = 200 ) {        $this->controller->response( $data, $status );    }    /* ***** DOC BLOCK ***** */    public function getDocBlock( ) {        return DocBlockGenerator::fromArray( array(            'shortDescription' => $this->entity.' '.$this->subDir.' class',            'longDescription'  => 'This is an auto-generated class. Always remember to keep your custom code inside of the PROTECTED_ZONE to avoid losses.',        ) );    }    /* ***** END - DOC BLOCK ***** */    /********** FILE UTILS ************/    public function toCamelCase( $string, $capitalizeFirstCharacter = true, $separator = '_' ) {        $str = str_replace ( ' ', '', ucwords( str_replace ( $separator, ' ', $string ) ) );        if ( !$capitalizeFirstCharacter ) {            $str = lcfirst( $str );        }        return $str;    }    private function insertString ( &$string, $keyword, $stringToInsert ) {        $string = substr_replace( $string, $stringToInsert, strrpos( $string, $keyword ) - strlen( $keyword ), 0 );        return $string;    }    public function buildProtectedZone( ) {        $protectedZone = PHP_EOL .             TAB . PROTECTED_ZONE . PHP_EOL .             TAB . $this->getProtectedCode( ) . PHP_EOL .             TAB . PROTECTED_ZONE;        return $protectedZone;    }    public function fileCreate( $filename, $classGenerator ) {        if ( file_exists( $this->getFilePath( ) ) ) {            $content = file_get_contents( $this->getFilePath( ) );            //Get protected code            $protectedPos = strpos( $content, PROTECTED_ZONE );            $protectedCode = '';            if ( $protectedPos !== false ) {                $protectedCode = explode( PROTECTED_ZONE, $content);                $this->setProtectedCode( $protectedCode[ 1 ] );            }            $generator = FileGenerator::fromReflectedFileName( $this->getFilePath( ) );            $generator->setClass( $classGenerator );            $content = $generator->generate( );            // Insert the protected code into the new string            $this->insertString ( $content, '}', $this->buildProtectedZone( ) );//            print_r($content);exit;                   } else {            $generator = new FileGenerator( );            $generator->setClass( $classGenerator );            $content = $generator->generate( );            $this->insertString ( $content, '}', $this->buildProtectedZone( ) );        }                $this->filePutContents( $filename, $content );    }    /**    * @param string $filename <p>file name including folder.     * example :: /path/to/file/filename.ext or filename.ext</p>    * @param string $data <p> The data to write.    * </p>    * @param int $flags same flags used for file_put_contents.    * @return bool <b>TRUE</b> file created succesfully <br> <b>FALSE</b> failed to create file.    */    private function filePutContents( $filename, $data, $flags = 0 ){        $dirName = dirname( $filename );        if ( ! is_dir( $dirName ) ) {            mkdir( $dirName . '/', 0777, true );        }        return file_put_contents( $filename, $data, $flags );    }    /********** FILE UTILS ************/    public function generate( ) {        // Definitions        $classGenerator = new ClassGenerator();        $classGenerator->setName( $this->getClassName( ) );        $classGenerator->setDocblock( $this->getDocBlock( ) );        $classGenerator->setNamespaceName( $this->getClassNameSpace( ) );        $classGenerator->setExtendedClass( $this->extendedClass );        // Properties        $classGenerator->addProperties( $this->getProperties( ) );        // Use        $this->addUse( $classGenerator );        // Methods        $this->addMethods( $classGenerator );        $this->fileCreate( $this->getFilePath( ), $classGenerator );        return $this->getObjectPath( );    }    /* ***** PROPERTIES ***** */    private function getProperties( ) {        if ( !$this->properties ) {            $this->properties = array ( );        }        return $this->properties;    }    public function setProperties( $propertiesArray ) {        $this->properties = $propertiesArray;    }    /* ***** END - PROPERTIES ***** */    private function addUse( &$classGenerator ) {        foreach ( $this->useArr as $use => $alias ) {            $classGenerator->addUse( $use, $alias );        }    }}?>