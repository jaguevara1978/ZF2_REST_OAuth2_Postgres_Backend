<?namespace Base\Generator;use Base\Generator\BaseGenerator;use Zend\Code\Generator\ClassGenerator;use Zend\Code\Generator\DocBlockGenerator;use Zend\Code\Generator\DocBlock\Tag;use Zend\Code\Generator\PropertyGenerator;use Zend\Code\Generator\MethodGenerator;use Zend\Code\Generator\ParameterGenerator;class ModuleGenerator extends BaseGenerator {    protected $subDir = 'Controller';    protected $useArr = array (                'Base\Controller\BaseController'=>null,            );    protected $extendedClass = 'BaseController';    public function generate( ) {        // Create entry on config/module.config.php        $this->updateModuleConfig( );        $this->fileCreate( $this->getFilePath( ), $classGenerator );        __debug( 'entro', $this, __FUNCTION__ );    }        private function updateModuleConfig ( ) {        $dir = getcwd( ).'/module/'.ucfirst( $this->db ).'/config/';        $filename = $dir.'module.config.php';        $moduleConfigArray = include( $filename );                $keyCtrl = $this->getModuleName( ).'\\'.$this->subDir.'\\'.$this->getClassName( );        if ( !array_key_exists( $keyCtrl, $moduleConfigArray [ 'controllers' ][ 'invokables' ] ) ) {            $moduleConfigArray [ 'controllers' ][ 'invokables' ][ $keyCtrl ] = $this->getModuleName( ).'\\'.$this->subDir.'\\'.$this->getClassName( );        }        $keyRoute = $this->tableName;        if ( !array_key_exists( $keyRoute, $moduleConfigArray [ 'router' ][ 'routes' ] ) ) {            $moduleConfigArray [ 'router' ][ 'routes' ][ $keyRoute ] = array(                                                                            'type' => 'segment',                                                                            'options' => array(                                                                                'route' => '/'.$keyRoute.'[/:id]',                                                                                'defaults' => array(                                                                                    'controller' => $keyCtrl,                                                                                ),                                                                            ),                                                                        );        }                $newContent = '<? return ' . var_export( $moduleConfigArray, true ) . ';';                // dir doesn't exist, make it        if ( !is_dir( $dir ) ) {            mkdir( $dir );        }        file_put_contents( $filename, $newContent );    }    /* ***** METHODS ***** */    public function addMethods( &$classGenerator ) {        $classGenerator->addMethods(             array(                $this->__constructMethod( ),            )        );    }    public function __constructMethod( ) {        $body = '$this->setEntity( \'' . $this->toCamelCase ( $this->entity ) . '\' );';        $body .= PHP_EOL;        $body .= '$this->setChildNameSpace( __NAMESPACE__ );';        $result = new MethodGenerator(            '__construct',            [ ],            MethodGenerator::FLAG_PUBLIC,            $body        );        return $result;    }    /* ***** END - METHODS ***** */            /* **** UTILS **** */    /* ***** END - UTILS ***** */}?>