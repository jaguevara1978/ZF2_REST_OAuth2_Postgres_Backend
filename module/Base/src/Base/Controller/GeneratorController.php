<?namespace Base\Controller;use Base\Controller\BaseController;use Base\Generator\ModelGenerator;use Base\Generator\ControllerGenerator;use Base\Generator\FormGenerator;use Base\Generator\TableGenerator;use Zend\Code\Generator\ClassGenerator;use Zend\Code\Generator\DocBlockGenerator;use Zend\Code\Generator\DocBlock\Tag;use Zend\Code\Generator\PropertyGenerator;use Zend\Code\Generator\MethodGenerator;use Zend\Db\Metadata\Metadata;class GeneratorController extends BaseController {    protected $metadata;        private function getMetadata( $db ) {        if ( !$this->metadata ) {            $this->metadata = new Metadata( $this->getAdapter( $db ) );                }        return $this->metadata;    }    public function __construct( ) {        $this->setEntity( 'Generator' );        $this->setChildNameSpace( __NAMESPACE__ );    }    public function get ( $id ) {        $this->create( array( 'db'=>$id ) );    }    public function create ( $data ) {        try {            $db = $data[ 'db' ];                        // TODO - Make it available for multiple DBs.            // Validate DB exists            // Validate DB module exists            // If module does not exist, create it            $tableName = null;            if ( array_key_exists( 'tableName', $data ) ) {                $tableName = $data[ 'tableName' ];            }            $metadata = $this->getMetadata( $db );                $generatedObjects[ 'module' ][ 'path' ] = getcwd( ).'/module/'.ucfirst( $db ).'/src/'.ucfirst( $db ).'/';            if ( !$tableName ) {                // get the table names                $tableNames = $metadata->getTableNames( );                foreach ($tableNames as $tableName) {                    $tableGenerator = new TableGenerator( $this, $metadata, $db, $tableName );                    $generatedObjects[ 'module' ][ 'tables' ][ ] = $tableGenerator->generate( );                    $formGenerator = new FormGenerator( $this, $metadata, $db, $tableName );                    $generatedObjects[ 'module' ][ 'forms' ][ ] = $formGenerator->generate( );                    $controllerGenerator = new ControllerGenerator( $this, $metadata, $db, $tableName );                    $generatedObjects[ 'module' ][ 'controllers' ][ ] = $controllerGenerator->generate( );                                        $modelGenerator = new ModelGenerator( $this, $metadata, $db, $tableName );                    $generatedObjects[ 'module' ][ 'models' ][ ] = $modelGenerator->generate( );                }            } else {                $tableGenerator = new TableGenerator( $this, $metadata, $db, $tableName );                $generatedObjects[ 'module' ][ 'tables' ][ ] = $tableGenerator->generate( );                $formGenerator = new FormGenerator( $this, $metadata, $db, $tableName );                $generatedObjects[ 'module' ][ 'forms' ][ ] = $formGenerator->generate( );                $controllerGenerator = new ControllerGenerator( $this, $metadata, $db, $tableName );                $generatedObjects[ 'module' ][ 'controllers' ][ ] = $controllerGenerator->generate( );                $modelGenerator = new ModelGenerator( $this, $metadata, $db, $tableName );                $generatedObjects[ 'module' ][ 'models' ][ ] = $modelGenerator->generate( );            }                return $this->response( $generatedObjects );        } catch ( \Exception $e ) {            return $this->response( $e );        }    }}?>