<?phpnamespace Challenge\Controller;use \Exception;use \DateTime;use Base\Controller\BaseController;/** * Challenge Controller class * * This is an auto-generated class. Always remember to keep your custom code inside * of the PROTECTED_ZONE to avoid losses. */class ChallengeProcessController extends BaseController{    public function __construct()    {        $this->setEntity( 'Challenge' );        $this->setChildNameSpace( __NAMESPACE__ );    }	/*#PROTECTED_ZONE#*/    public function getChallenge( $contact ) {        return $this->getTable( )->getChallenge( $contact );    }    private function reward( $data ) {//         return $this->getTable( )->getReward( $data );        $rewards[ 0 ][ 'title' ] = '10% Anything whatever';        $rewards[ 0 ][ 'img' ] = null;        $rewards[ 0 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 1 ][ 'title' ] = '20% something else';        $rewards[ 1 ][ 'img' ] = null;        $rewards[ 1 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 2 ][ 'title' ] = '20% something else';        $rewards[ 2 ][ 'img' ] = null;        $rewards[ 2 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 3 ][ 'title' ] = '100% reward of something';        $rewards[ 3 ][ 'img' ] = null;        $rewards[ 3 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 4 ][ 'title' ] = '45% Wow';        $rewards[ 4 ][ 'img' ] = null;        $rewards[ 4 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 5 ][ 'title' ] = 'More and More rewards';        $rewards[ 5 ][ 'img' ] = null;        $rewards[ 5 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 6 ][ 'title' ] = 'Free shipping on something';        $rewards[ 6 ][ 'img' ] = null;        $rewards[ 6 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 7 ][ 'title' ] = 'Free coffee';        $rewards[ 7 ][ 'img' ] = null;        $rewards[ 7 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $rewards[ 8 ][ 'title' ] = 'Get a new bathroom 46%';        $rewards[ 8 ][ 'img' ] = null;        $rewards[ 8 ][ 'details' ] = 'Details about the Reward, I guess I will save this for later, there is no point on filling this with useless things.';        $key = array_rand( $rewards, 1 );        return $rewards[ $key ];    }        public function create( $data ) {        try {            // I need to know if the token is valid            $this->validateOAuth2( );            // Valid token - It passed the validation            // Now I go find the User information            $contact = $this->getTokenContact( );            // Now I look for the actual challenge being played by the user.            // I can recognize it by the only record on the PlayerEngagement table             // for that contactId WHERE end_time IS NULL            $data[ 'contact_seqid' ] = $contact->getVariable( 'contact_seq_id' );            $result = $this->getTable( )->validateChallenge( $data );                        // Get a possible reward//             if ( $result[ 'correct' ] == 1 ) {                $result[ 'reward' ] = $this->rewards( $data );/*            } else {                $result[ 'reward' ] = null;            }*/            $result[ 'player_stats' ] = $this->getTable( )->getPlayerStats( $data );//              __debug( $result, $this, __FUNCTION__ );                                    /*            // Now I go find the challenge matching Demographics and Player History            $challenge = $this->getChallenge( $contact );                        // Now I go find the Challenge responses            $TriviaResponsesController = $this->getServiceLocator( )->get( 'TriviaResponsesController' );            $responses = $TriviaResponsesController->getChallengeResponses( $challenge );            // Now I save the history of the challenge I am going to respond            // So I can know later which challenges the player already knows            // also, I need to keep a record of the actual             // Challenge that the contact is answering So I can know later which challenge the answer belongs            // And it won't be necessary to send or receive the Challenge ID for security purposes            $this->saveHistory( array( 'contact_seqid' => $contact->getVariable( 'contact_seq_id' ), 'challenge_seqid' => $challenge[ 'challenge_seqid' ] ) );                // Now I have to go for an Challenge Assigned sponsor             // to show it along with the challenge            // Now I go find the Challenge responses            $AssignedChallengeSponsorshipController = $this->getServiceLocator( )->get( 'AssignedChallengeSponsorshipController' );            $sponsorship = $AssignedChallengeSponsorshipController->getChallengeSponsorship( $challenge );            // Now I prepare the response for the request            // Challenge Description            $result[ 'description' ] = $challenge[ 'description' ];            $result[ 'display_time' ] = !$challenge[ 'display_time' ] ? DEFAULT_DISPLAY_TIME : $this->timeToSecs( $challenge[ 'display_time' ] );            $result[ 'site' ] = $sponsorship[ 'default_url' ];            $result[ 'category' ] = 'Category Description';            $result[ 'title' ] = 'Title';            $result[ 'answer' ] = null;            // Challenge Possible answers            $count = 0;            foreach( $responses as $resp ) {                $count++;                $result[ 'options' ][ $count ][ 'value' ] = $resp[ 'trivia_responses_seqid' ];                $result[ 'options' ][ $count ][ 'option' ] = $resp[ 'description' ];            }    */                           return $this->response( $result );        } catch ( Exception $e ) {            return $this->response( $e );        }    }        public function getList( ) {        return $this->response( $this->translate( 'globals.errors.not_acceptable' ), 406 );     }       public function update( $id, $data ) {        return $this->response( $this->translate( 'globals.errors.not_acceptable' ), 406 );     }        public function delete( $id ) {        return $this->response( $this->translate( 'globals.errors.not_acceptable' ), 406 );     }	/*#PROTECTED_ZONE#*/}