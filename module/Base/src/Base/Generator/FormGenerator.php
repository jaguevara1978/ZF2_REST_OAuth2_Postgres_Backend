<?namespace Base\Generator;use Base\Generator\BaseGenerator;use Zend\Code\Generator\ClassGenerator;use Zend\Code\Generator\DocBlockGenerator;use Zend\Code\Generator\DocBlock\Tag;use Zend\Code\Generator\PropertyGenerator;use Zend\Code\Generator\MethodGenerator;use Zend\Code\Generator\ParameterGenerator;use Base\Exception\CommonException;class FormGenerator extends BaseGenerator {    protected $subDir = 'Form';    protected $useArr = array ( 'Base\Form\BaseForm'=>null, );    protected $properties = array ( );    protected $extendedClass = 'BaseForm';    public function generate( ) {        return parent::generate( );    }    private function addUse( &$classGenerator ) {        foreach ( $this->useArr as $use => $alias ) {            $classGenerator->addUse( $use, $alias );        }    }    /* ***** METHODS ***** */    public function addMethods( &$classGenerator ) {        $methods = array(            $this->__constructMethod( ),        );                // Use this in case you want to protect an autogenerated method        /*if ( !file_exists( $this->getFilePath( ) ) ) {            $this->setProtectedCode( $this->protectedMethod( )->generate( ) );        }*/        $classGenerator->addMethods( $methods );    }    public function __constructMethod( ) {        $body = 'parent::__construct( \''.$this->getClassName( ).'\' );';        $body .= PHP_EOL . PHP_EOL;        foreach ( $this->getTable( )->getColumns( ) as $column ) {            $body .= '$this->add( ' . var_export( $this->getFieldSet( $column ), true ) . PHP_EOL . ' );' . PHP_EOL;        }        $result = new MethodGenerator(            '__construct',            [ ],            MethodGenerator::FLAG_PUBLIC,            $body        );        return $result;    }    /* ***** END - METHODS ***** */            /* **** UTILS **** */    private function fieldType ( $column ) {        // TODO - Implement all types        if ( strpos( strtolower( $column->getDataType( ) ), 'char' ) !== FALSE ) {            return 'text';        } else {            return $column->getDataType( );        }    }        private function getFieldSet ( $column ) {        $result = array( );        // Char with limit        $result = array(                        'name' => $column->getName( ),                        'attributes' => array (                            'type' => $this->fieldType( $column ),                        ),                        'options' => array (                            'label' => 'labels.' . $this->getTableName( ) . '.' . $column->getName( ),                            'helpText' => 'helpText.' . $this->getTableName( ) . '.' . $column->getName( ),                        )                     );        return $result;    }    /* ***** END - UTILS ***** */}?>