<?phpnamespace Base\Mail;use \Exception;use Base\Mail\MailSender;use Base\Utils\Utils;/*** Use only through the ServiceLocator*/class MemberSignUpConfirmation extends MailSender {    public function __construct( $serviceLocator ) {        parent::__construct( $serviceLocator );        $this->setTransportConfigKey( 'smtpOptionsCKPT' );        $this->setSubject( $this->translate( 'globals.messages.member_account_activated_subject' ) );        $this->setParmKeys( array( 'fname' ) );    }    public function getTextContent( ) {        if ( ! $this->textContent ) {            $textContent = '$textContent';            $this->textContent = $textContent;        }        return $this->textContent;    }    public function getHtmlMarkup( ) {        if ( ! $this->htmlMarkup ) {            // View renderer            $renderer = $this->getServiceLocator( )->get( 'Zend\View\Renderer\RendererInterface' );                        // Email content            $viewContent = new \Zend\View\Model\ViewModel( $this->getModel( ) );                // The config key has the same name as the Subject Constant            $viewContent->setTemplate( 'ckpt_activated' ); // set in module.config.php            $content = $renderer->render( $viewContent );            // Email layout            $viewLayout = new \Zend\View\Model\ViewModel( array( 'content' => $content ) );            $viewLayout->setTemplate( 'layout_ckpt' ); // set in module.config.php                $htmlMarkup = $renderer->render( $viewLayout );                        $this->htmlMarkup = $htmlMarkup;        }        return $this->htmlMarkup;    }    public function getModel( ) {        // TODO - Dynamically get the Model reading the Template                try {            Utils::arrayKeyExists( $this->getParmKeys( ), $this->getBodyParms( ) );            // fname, title, actionText            $model = $this->getBodyParms( );            $config = $this->getConfig( );            $actionLink = $config[ 'allowedOrigins' ][ 'ckpt' ];            $model = array_merge(                 $model                ,array(                    'title' => $this->translate(                        'globals.messages.member_account_activated_title'                        , array( 'fname' => $model[ 'fname' ] )                     )                    ,'actionText' => $this->translate( 'globals.messages.member_account_activated_button_text_go' )                    ,'actionLink' => $actionLink                )            );            return $model;        } catch ( Exception $e ) {            throw new Exception( get_class( ) . ' - ' . __FUNCTION__ . ': ' . $e->getMessage( ), 500 );        }    }    public function getFrom( ) {        if ( ! $this->from ) {            try {                $config = $this->getConfig( );                //Utils::arrayKeyExists( CONFIG_CKPT_SIGNUP, $config );                $this->from = $config[ 'mailSender' ][ CONFIG_CKPT_SIGNUP ];            } catch ( Exception $e ) {                throw new Exception( get_class( ).' - '.__FUNCTION__.': '.$e->getMessage( ), 500 );            }        }        return $this->from;    }}