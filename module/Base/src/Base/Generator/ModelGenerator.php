<?namespace Base\Generator;use Base\Generator\BaseGenerator;use Zend\Code\Generator\ClassGenerator;use Zend\Code\Generator\DocBlockGenerator;use Zend\Code\Generator\DocBlock\Tag;use Zend\Code\Generator\PropertyGenerator;use Zend\Code\Generator\MethodGenerator;use Zend\Code\Generator\ParameterGenerator;use Base\Exception\CommonException;class ModelGenerator extends BaseGenerator {    protected $subDir = 'Model';    protected $useArr = array (                'Base\Model\BaseModel'=>null,                'Zend\InputFilter\Factory'=>'InputFactory',                'Zend\InputFilter\InputFilter'=>null,            );    protected $extendedClass = 'BaseModel';    public function generate( ) {        // Sets only the entity name as the name of the class        $this->setNameFormatFull( false );        $properties = array ( );        foreach ( $this->getTable( )->getColumns( ) as $column ) {            $properties[ ] = new PropertyGenerator( $column->getName( ), null, PropertyGenerator::FLAG_PROTECTED );        }        $this->setProperties( $properties );        return parent::generate( );    }    /* ***** METHODS ***** */    public function addMethods( &$classGenerator ) {        $methods = array(            $this->exchangeArrayMethod(),            $this->getInputFilterMethod( ),        );                if ( !file_exists( $this->getFilePath( ) ) ) {            $this->setProtectedCode( $this->addCustomFiltersMethod( )->generate( ) );        }        $classGenerator->addMethods( $methods );    }    private function exchangeArrayMethod( ) {        $body = '';        foreach ( $this->getTable( )->getColumns( ) as $column ) {            //print_r($column);exit;            if ( $body ) $body .= PHP_EOL;            $name = $column->getName( );            $body .= '$this->'.$name.' = ( isset( $data[ \''.$name.'\' ] ) ) ? $data[ \''.$name.'\' ] : null;';        }        $result = new MethodGenerator(            'exchangeArray',            array( 'data' ),            MethodGenerator::FLAG_PUBLIC,            $body        );        return $result;    }     private function getInputFilterMethod( ) {        $body = 'if ( !$this->inputFilter ) {' . PHP_EOL .            '$inputFilter = new InputFilter();' . PHP_EOL .            '$factory     = new InputFactory();' . PHP_EOL . PHP_EOL;        $primaryColumns = array( );        $constraints = $this->getTable( )->getConstraints( );        foreach ( $constraints AS $constraint ) {            if ( $constraint->isPrimaryKey( ) ) {                $primaryColumns = $constraint->getColumns( );            }        }        foreach ( $this->getTable( )->getColumns( ) as $column ) {            // Find out whether the column isrequired or not            $isRequired = false;            // If is autonumeric, it is not required even if it is the PK            $pos = strpos( $column->getColumnDefault( ), 'nextval(' );            if ( $pos !== false ) { // It means it is autonumeric                $isRequired = false;            } else {                $isRequired = ! $column->isNullable( );            }            $input = array(                'name' => $column->getName( ),                'required' => $isRequired,                'validators' => $this->getValidators( $column )            );            $body .= PHP_EOL . '$inputFilter->add( $factory->createInput( ' . var_export( $input, true ) . ') );' . PHP_EOL;        }        $body .= PHP_EOL . '$this->addCustomFilters( $inputFilter, $factory );';        $body .= PHP_EOL . '$this->inputFilter = $inputFilter;' . PHP_EOL . '}' . PHP_EOL . PHP_EOL;        $body .= 'return $this->inputFilter;';        $result = new MethodGenerator(            'getInputFilter',            [ ],            MethodGenerator::FLAG_PUBLIC,            $body        );        return $result;    }        private function addCustomFiltersMethod( ) {        $body = 'return $inputFilter;';        $inputFilterParm = new ParameterGenerator( 'inputFilter', null, null, null, true );        $docBlock = DocBlockGenerator::fromArray(array(            'shortDescription' => 'You may customize the filters behaviours using this method',        ));        $result = new MethodGenerator(            'addCustomFilters',            array( $inputFilterParm, 'factory' ),            MethodGenerator::FLAG_PUBLIC,            $body,            $docBlock        );        return $result;    }    /* ***** END - METHODS ***** */            /* **** UTILS **** */    private function getValidators ( $column ) {        $result = array( );        if ( !$column->isNullable( ) ) {            $result[ ] = array( 'name'=>'not_empty' );        }        // Char with limit        if ( strpos( strtolower( $column->getDataType( ) ), 'char' ) !== false ) {            $result[ ] = array(                            'name' => 'StringLength',                            'options' => array(                                'encoding' => 'UTF-8',                                'min' => 1,                                'max' => $column->getCharacterMaximumLength( )                            ),                        );            $result[ ] = array(                            'name' => 'Alnum',                            'options' => array( 'allowWhiteSpace'=>true ),                        );        }        return $result;    }    /* ***** END - UTILS ***** */}?>