<?phpnamespace Base\Mail;use \Exception;use Zend\Mail\Transport\Smtp as SmtpTransport;use Zend\Mail\Transport\SmtpOptions;use Zend\Mail\Message;use Zend\Mail\Transport\Sendmail as SendmailTransport;use Zend\Mime\Message as MimeMessage;use Zend\Mime\Part as MimePart;/*** Use only through the ServiceLocator*/abstract class MailSender {//    const SPONSOR_SIGNUP = CONFIG_SPONSOR_SIGNUP;    protected $config;    protected $serviceLocator;    protected $transport;    protected $message;    protected $subject;    protected $to;    protected $body;    protected $from;    protected $bodyParms;    protected $htmlMarkup;    protected $textContent;    protected $parmKeys;    protected $transportConfigKey;    public function __construct( $serviceLocator ) {        $this->setServiceLocator( $serviceLocator );    }    // ! ** ABSTRACT_METHODS **    // The model are the parameters and values to be replaced on    // the email template.    abstract function getModel( );    abstract function getHtmlMarkup( );    abstract function getTextContent( );    // ! ** END - ABSTRACT_METHODS **    // ! ** PUBLIC_METHODS **    /**        This is the one who makes the final send of the email    */    public function fly( ) {        $this->getTransport( )->send( $this->getMessage( ) );        // Testing purposes only, please comment, This allows to rollback the record//         throw new Exception( 'Email Sent, Record NOT created', 400 );    }    public function getBody( ) {        if ( ! $this->body ) {            $text = new MimePart( $this->getTextContent( ) );            $text->type = "text/plain";                $html = new MimePart( $this->getHtmlMarkup( ) );            $html->type = "text/html";            $body = new MimeMessage( );            $body->setParts( array( $text, $html ) );            $this->body = $body;        }        return $this->body;    }    public function getConfig( ) {        if ( ! $this->config ) {            $this->config = $this->getServiceLocator( )->get( 'config' );        }        return $this->config;    }    public function setConfig( $config ) {        $this->config = $config;    }    public function getSubject( ) {        if ( ! $this->subject ) {            throw Exception( 'Please define the subject using setSubject method', 500 );        }        return $this->subject;    }    public function getServiceLocator( ) {        if ( ! $this->serviceLocator ) {            throw Exception( 'MailSender - No service Locator', 500 );        }        return $this->serviceLocator;    }    public function getTransportConfigKey( ) {        if ( ! $this->transportConfigKey ) {            throw Exception( 'Please define the smtp Configuration key using setTransportConfigKey, It has to be                 an entry on local.php configuration file under MailSender key', 500 );        }        return $this->transportConfigKey;    }    public function setTransportConfigKey( $string ) {        $this->transportConfigKey = $string;    }    public function getBodyParms( ) {        if ( ! $this->bodyParms ) {            $this->bodyParms = array( );        }        return $this->bodyParms;    }    public function setBodyParms( $array ) {        $this->bodyParms = $array;    }    public function setSubject( $string ) {        $this->subject = $string;    }    public function getTo( ) {        return $this->to;    }    public function getParmKeys( ) {        if ( ! $this->parmKeys ) {                    }        return $this->parmKeys;    }    public function setParmKeys( $keys ) {        if ( ! is_array( $keys ) ) {            $keys = array( $keys );        }        $this->parmKeys = $keys;    }    /**        I can receive a string or an array        Please, send me an array( 'email1@mail.com' => 'sender name 1', 'email2@mail.com' => 'sender name 2' )    */    public function addTo( $to ) {        // If it is an array then I have to merge the existing values with the new ones        if ( is_array( $to ) ) {            // I have to validate if there is actually data inside the array            if ( $this->to ) {                $this->to = array_merge( $this->to, $to );            } else {                // If no data on the array, then just put the information there                $this->to = $to;            }        } else {            $this->to[ ] = $to;        }    }    /**        Please, send me an array( email@mail.com' => 'sender name' )    */    public function setFrom( $array ) {        $this->from = $array;    }    public function getFrom( ) {        if ( ! $this->from ) {            throw Exception( 'I need to know who is sending the email, use setFrom method', 500 );        }        return $this->from;    }    public function setBody( MimeMessage $body ) {        $this->body = $body;    }    public function setHtmlMarkup( $string ) {        $this->htmlMarkup = $string;    }    public function setTextContent( $string ) {        $this->textContent = $string;    }    // ! ** END - PUBLIC_METHODS **    // ! ** PRIVATE GETTERS-SETTERS    private function getMessage( ) {        if ( ! $this->message ) {            $from = $this->getFrom( );            $message = new Message( );            foreach( $from as $address => $name ) {                $message->addFrom( $address, $name );            }            $message->setSubject( $this->getSubject( ) );            // Add recipients            $toArr = $this->getTo( );            foreach( $toArr as $address => $name ) {                $message->addTo( $address, $name );            }                $message->setBody( $this->getBody( ) );            $message->getHeaders( )->get('content-type')->setType( 'multipart/alternative' );            $this->message = $message;        }        return $this->message;      }    private function setServiceLocator( $serviceLocator ) {        $this->serviceLocator = $serviceLocator;    }    private function setMessage( Message $message ) {        $this->message = $message;    }      public function getTransport( ) {        if ( ! $this->transport ) {            // Setup SMTP transport            $transport = new SmtpTransport( );                $config = $this->getConfig( );            $key = $this->getTransportConfigKey( );            if ( isset( $config[ 'mailSender' ][ $key ] ) ) {                $options = new SmtpOptions( $config[ 'mailSender' ][ $key ] );            } else {                throw new Exception( get_class( ).' - '.__FUNCTION__.': Define the key on global Configuration: '.$key, 500 );            }            $transport->setOptions( $options );            $this->transport = $transport;        }        return $this->transport;    }   // ! ** END -PRIVATE GETTERS-SETTERS     // ! ** UTILS    protected function translate( $msgId, $parms = array( ) ) {        $translator = $this->getServiceLocator( )->get( 'translator' );        $message = $translator->translate( $msgId );        //$message = $this->vksprintf ( $message, $parms );        return $message;    }  }